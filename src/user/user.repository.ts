import { Injectable, Logger } from '@nestjs/common';
import { UserDTO, UserUpdateDTO } from './dto/user.dto';
import { InjectModel } from '@nestjs/mongoose';
import { User } from './user.entity';
import { Model } from 'mongoose';
import { Car } from '../car/car.entity';
import { HttpService } from '@nestjs/axios';

interface IFindParams {
  monitor: boolean;
}

@Injectable()
export class UserRepository {
  private readonly logger = new Logger(UserRepository.name);

  constructor(
    @InjectModel(User.name) private userModel: Model<User>,
    private httpService: HttpService,
  ) {}

  async find(params: IFindParams): Promise<User[]> {
    const users = (await this.userModel.find(params).lean()) as User[];

    this.logger.debug('Users found', users);

    return users;
  }

  async create(user: UserDTO) {
    const createdUser = await this.userModel.create(user);

    this.logger.debug('User created', createdUser);
  }

  async update(user: UserUpdateDTO) {
    const updateResults = await this.userModel.updateOne({ id: user.id }, user);

    this.logger.debug(`User ${user.id} updated`, updateResults);
  }

  async sendTg(chatId: String, cars: Car[]) {
    this.logger.debug(`Sending cars to chatId: ${chatId}`, cars);
    for (const car of cars) {
      try {
        const url = `https://api.telegram.org/bot6342868231:AAHx0qLAOdfxi3ZLXy5gzH1LkGyVKRVPIns/sendPhoto?chat_id=${chatId}&photo=${
          car.imageUrl
        }&caption=${this.getTgTemplate(car)}&parse_mode=html`;
        await this.httpService.axiosRef.get(url);
      } catch (error) {
        this.logger.error(`Unable to send car chatID:${chatId}`, error);
      }
    }
  }
  private getTgTemplate(car: Car): string {
    const costDifference =
      car.costDifference > 0
        ? `üü°–í—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞: ${car.costDifference}`
        : `üü¢ –ù–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞: ${-car.costDifference}`;
    return `<b><a href="${car.url}">${car.brand} ${car.model}, ${car.year}, ${car.engineVolume}, ${car.transmission}, ${car.mileage}km</a></b>%0A<b>üí∞ –¶–µ–Ω–∞: ${car.price} ‚ÇΩ</b>%0A- –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ: ${costDifference}%0Aüõ† <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>%0A<i>- –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${car.enginePower} –ª.—Å.%0A- –û–±—å–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${car.engineVolume} –ª.%0A- –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${car.engineType}%0A- –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: ${car.transmission}%0A- –ü—Ä–∏–≤–æ–¥: ${car.drive}%0A- –¶–≤–µ—Ç: ${car.color}%0A- –ü—Ä–æ–±–µ–≥: ${car.mileage} –∫–º.%0A- –†—É–ª—å: ${car.wheel}%0A- –ö–æ–ª-–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: ${car.ownersCount}%0A- –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${car.condition}%0A- –¢–∏–ø –∫—É–∑–æ–≤–∞: ${car.back}</i>%0Aüë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> ${car.seller}%0Aüåè <b>–ì–æ—Ä–æ–¥:</b> ${car.city}%0A‚úÖ <b>–°—Å—ã–ª–∫–∞:</b> ${car.url}%0A‚è± <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b> ${car.postedAt} –ú–°–ö%0A%0A–¢–µ–ª–µ—Ñ–æ–Ω: ${car.phone}`;
  }
}
