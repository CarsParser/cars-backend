import { Injectable, Logger } from '@nestjs/common';
import { UserDTO, UserUpdateDTO } from './dto/user.dto';
import { InjectModel } from '@nestjs/mongoose';
import { User } from './user.entity';
import { Model } from 'mongoose';
import { Car } from '../car/car.entity';
import { HttpService } from '@nestjs/axios';
import {
  BackType,
  City,
  Color,
  Condition,
  Drive,
  EngineType,
  Seller,
  Transmission,
  Wheel,
} from 'src/common';
import { formatInTimeZone } from 'date-fns-tz';

const botColor: { [key in Color]: string } = {
  [Color.white]: '–±–µ–ª—ã–π',
  [Color.gray]: '—Å–µ—Ä—ã–π',
  [Color.silver]: '—Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π',
  [Color.black]: '—á—ë—Ä–Ω—ã–π',
  [Color.brown]: '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π',
  [Color.gold]: '–∑–æ–ª–æ—Ç–æ–π',
  [Color.beige]: '–±–µ–∂–µ–≤—ã–π',
  [Color.red]: '–∫—Ä–∞—Å–Ω—ã–π',
  [Color.vinous]: '–±–æ—Ä–¥–æ–≤—ã–π',
  [Color.orange]: '–æ—Ä–∞–Ω–∂–µ–≤—ã–π',
  [Color.yellow]: '–∂–µ–ª—Ç—ã–π',
  [Color.green]: '–∑–µ–ª–µ–Ω—ã–π',
  [Color.lightBlue]: '–≥–æ–ª—É–±–æ–π',
  [Color.blue]: '—Å–∏–Ω–∏–π',
  [Color.violet]: '—Ñ–∏–æ–ª–µ—Ç–æ—Ä—ã–π',
  [Color.purple]: '–ø—É—Ä–ø—É—Ä–Ω—ã–π',
  [Color.pink]: '—Ä–æ–∑–æ–≤—ã–π',
};

const botEngineType: { [key in EngineType]: string } = {
  [EngineType.disel]: '–¥–∏–∑–µ–ª—å',
  [EngineType.petrol]: '–±–µ–Ω–∑–∏–Ω',
  [EngineType.hybrid]: '–≥–∏–±—Ä–∏–¥',
  [EngineType.electric]: '—ç–ª–µ–∫—Ç—Ä–æ',
};

const botTransmission: { [key in Transmission]: string } = {
  [Transmission.auto]: '–∞–≤—Ç–æ–º–∞—Ç',
  [Transmission.robot]: '—Ä–æ–±–æ—Ç',
  [Transmission.vary]: '–≤–∞—Ä–∏–∞—Ç–æ—Ä',
  [Transmission.mechanic]: '–º–µ—Ö–∞–Ω–∏–∫–∞',
};

const botDrive: { [key in Drive]: string } = {
  [Drive.front]: '–ø–µ—Ä–µ–¥–Ω–∏–π',
  [Drive.back]: '–∑–∞–¥–Ω–∏–π',
  [Drive.full]: '–ø–æ–ª–Ω—ã–π',
};

const botWheel: { [key in Wheel]: string } = {
  [Wheel.right]: '–ø—Ä–∞–≤—ã–π',
  [Wheel.left]: '–ª–µ–≤—ã–π',
};

const botCondition: { [key in Condition]: string } = {
  [Condition.hit]: '–±–∏—Ç—ã–π',
  [Condition.notHit]: '–Ω–µ –±–∏—Ç—ã–π',
};

const botBackType: { [key in BackType]: string } = {
  [BackType.sedan]: '—Å–µ–¥–∞–Ω',
  [BackType.offroadThreeDoors]: '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 3-–¥–≤–µ—Ä–Ω—ã–π',
  [BackType.offroadFiveDoors]: '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ 3-–¥–≤–µ—Ä–Ω—ã–π',
  [BackType.universal]: '—É–Ω–∏–≤–µ—Ä—Å–∞–ª',
  [BackType.hatchbackThreeDoors]: '—Ö–µ—Ç—á–±–µ–∫ 3-–¥–≤–µ—Ä–Ω—ã–π',
  [BackType.hatchbackFiveDoors]: '—Ö–µ—Ç—á–±–µ–∫ 5-–¥–≤–µ—Ä–Ω—ã–π',
  [BackType.coupe]: '–∫—É–ø–µ',
  [BackType.minivan]: '–º–∏–Ω–∏–≤—ç–Ω',
  [BackType.minibus]: '–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å',
  [BackType.liftback]: '–ª–∏—Ñ—Ç–±–µ–∫',
  [BackType.pickup]: '–ø–∏–∫–∞–ø',
  [BackType.van]: '—Ñ—É—Ä–≥–æ–Ω',
  [BackType.cabrio]: '–∫–∞–±—Ä–∏–æ–ª–µ—Ç',
};

const botSeller: { [key in Seller]: string } = {
  [Seller.dealer]: '–∞–≤—Ç–æ–¥–∏–ª–µ—Ä',
  [Seller.private]: '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
};

const botCity: { [key in City]: string } = {
  [City.spb]: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
  [City.msk]: '–ú–æ—Å–∫–≤–∞',
  [City.samara]: '–°–∞–º–∞—Ä–∞',
  [City.ekb]: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
  [City.arkh]: '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
  [City.rostov]: '–†–æ—Å—Ç–æ–≤',
  [City.omsk]: '–û–º—Å–∫',
  [City.kazan]: '–ö–∞–∑–∞–Ω—å',
};

interface IFindParams {
  monitor: boolean;
}

@Injectable()
export class UserRepository {
  private readonly logger = new Logger(UserRepository.name);

  constructor(
    @InjectModel(User.name) private userModel: Model<User>,
    private httpService: HttpService,
  ) {}

  async find(params: IFindParams): Promise<User[]> {
    const users = (await this.userModel.find(params).lean()) as User[];

    this.logger.debug('Users found', users);

    return users;
  }

  async create(user: UserDTO) {
    const userToCreate = user as User;
    userToCreate.lastWatchedCars = {
      lastWatchedCarDateTime: new Date(),
      lastWatchedCarIds: [],
    };
    const createdUser = await this.userModel.create(user);

    this.logger.debug('User created', createdUser);
  }

  async update(user: UserUpdateDTO) {
    let userToUpdate = user as User;
    if (user.monitor) {
      userToUpdate.lastWatchedCars = {
        lastWatchedCarDateTime: new Date(),
        lastWatchedCarIds: [],
      };
    }
    const updateResults = await this.userModel.updateOne({ id: user.id }, user);

    this.logger.debug(`User ${user.id} updated`, updateResults);
  }

  async sendTg(chatId: String, cars: Car[]) {
    this.logger.debug(`Sending cars to chatId: ${chatId}`, cars);
    for (const car of cars) {
      try {
        const url = `https://api.telegram.org/bot6342868231:AAHx0qLAOdfxi3ZLXy5gzH1LkGyVKRVPIns/sendPhoto?chat_id=${chatId}&photo=${
          car.imageUrl
        }&caption=${this.getTgTemplate(car)}&parse_mode=html`;
        await this.httpService.axiosRef.get(url);
      } catch (error) {
        this.logger.error(`Unable to send car chatID:${chatId}`, error);
      }
    }
  }

  private getTgTemplate(car: Car): string {
    let costDifference: string = '';

    if (car.costDifference === 0) {
      costDifference = '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏';
    } else if (car.costDifference > 0) {
      costDifference = `üü° –í—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞: ${car.costDifference}‚ÇΩ`;
    } else {
      costDifference = `üü¢ –ù–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞: ${-car.costDifference}‚ÇΩ`;
    }

    let template = `<b><a href="${car.url}">${car.brand} ${car.model}, ${
      car.year
    }, ${car.engineVolume}, ${botTransmission[car.transmission]}, ${
      car.mileage
    }km</a></b>%0A<b>üí∞ –¶–µ–Ω–∞: ${
      car.price
    } ‚ÇΩ</b>%0A${costDifference}%0Aüõ† <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>%0A<i>- –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${
      car.enginePower
    } –ª.—Å.%0A- –û–±—å–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${car.engineVolume} –ª.%0A- –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${
      botEngineType[car.engineType]
    }%0A- –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: ${botTransmission[car.transmission]}%0A- –ü—Ä–∏–≤–æ–¥: ${
      botDrive[car.drive]
    }%0A- –¶–≤–µ—Ç: ${botColor[car.color]}%0A- –ü—Ä–æ–±–µ–≥: ${
      car.mileage
    } –∫–º.%0A- –†—É–ª—å: ${botWheel[car.wheel]}%0A- –ö–æ–ª-–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤: ${
      car.ownersCount
    }%0A- –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${botCondition[car.condition]}%0A- –¢–∏–ø –∫—É–∑–æ–≤–∞: ${
      botBackType[car.back]
    }</i>%0Aüë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> ${botSeller[car.seller]}%0Aüåè <b>–ì–æ—Ä–æ–¥:</b> ${
      botCity[car.city]
    }%0A‚úÖ <b>–°—Å—ã–ª–∫–∞:</b> ${
      car.url
    }%0A‚è± <b>–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b> ${formatInTimeZone(
      car.postedAt,
      'Europe/Moscow',
      'dd-MM-yyyy HH:mm',
    )} –ú–°–ö`;

    if (car.phone && car.phone !== 'UNKNOWN') {
      template += `%0A%0A–¢–µ–ª–µ—Ñ–æ–Ω: ${car.phone}`;
    }

    return template;
  }
}
